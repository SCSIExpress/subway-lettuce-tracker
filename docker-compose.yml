version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: subway-lettuce-postgres
    environment:
      POSTGRES_DB: subway_lettuce_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d subway_lettuce_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - subway-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: subway-lettuce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - subway-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: subway-lettuce-backend
    environment:
      # Core settings
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-5000}
      # Database settings
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/subway_lettuce_tracker}
      # Redis settings
      REDIS_URL: ${REDIS_URL:-redis://:${REDIS_PASSWORD:-redis123}@redis:6379}
      # CORS settings
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      # Cache settings
      CACHE_TTL: ${CACHE_TTL:-3600}
      ENABLE_CACHE: ${ENABLE_CACHE:-true}
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Performance monitoring
      ENABLE_PERFORMANCE_MONITORING: ${ENABLE_PERFORMANCE_MONITORING:-true}
    ports:
      - "${PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - subway-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: subway-lettuce-frontend
    environment:
      # API URL with fallback
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
      # Google Maps API Key
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
      # Feature flags
      VITE_ENABLE_OFFLINE_MODE: ${VITE_ENABLE_OFFLINE_MODE:-true}
      VITE_ENABLE_PWA: ${VITE_ENABLE_PWA:-true}
      VITE_ENABLE_ANALYTICS: ${VITE_ENABLE_ANALYTICS:-false}
      # App configuration
      VITE_APP_NAME: ${VITE_APP_NAME:-"Subway Lettuce Tracker"}
      VITE_DEFAULT_RADIUS: ${VITE_DEFAULT_RADIUS:-5000}
      VITE_MAX_LOCATIONS: ${VITE_MAX_LOCATIONS:-50}
    ports:
      - "3000:8080"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - subway-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: subway-lettuce-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - subway-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  subway-network:
    driver: bridge

