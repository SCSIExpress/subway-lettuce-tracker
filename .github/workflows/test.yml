name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Backend unit and integration tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: subway_lettuce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Setup test database
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/subway_lettuce_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run migrate
          npm run test:db

      - name: Run backend unit tests
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/subway_lettuce_test
          REDIS_URL: redis://localhost:6379
        run: npm test -- --coverage --watchAll=false

      - name: Run backend integration tests
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/subway_lettuce_test
          REDIS_URL: redis://localhost:6379
        run: npm test -- --testPathPattern=integration --watchAll=false

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend unit and component tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend unit tests
        working-directory: frontend
        run: npm run test:run -- --coverage

      - name: Run visual regression tests
        working-directory: frontend
        run: npm run test:run -- --testPathPattern=visual

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # End-to-end tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: subway_lettuce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup test database
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/subway_lettuce_test
        run: npm run migrate

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: Start backend server
        working-directory: backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/subway_lettuce_test
          PORT: 3001
        run: npm start &

      - name: Wait for backend
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done'

      - name: Run E2E tests
        working-directory: frontend
        env:
          VITE_API_URL: http://localhost:3001
        run: npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: subway_lettuce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Setup test database with sample data
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/subway_lettuce_test
        run: |
          npm run migrate
          npm run seed

      - name: Start backend server
        working-directory: backend
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/subway_lettuce_test
          PORT: 3001
        run: npm start &

      - name: Wait for backend
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done'

      - name: Run performance tests
        working-directory: backend
        run: npm test -- --testPathPattern=performance --watchAll=false

      - name: Run load tests with Artillery
        working-directory: backend
        run: |
          npx artillery run artillery-config.yml --output performance-report.json
          npx artillery report performance-report.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: backend/performance-report.html
          retention-days: 30

  # Security and code quality checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run security audit (backend)
        working-directory: backend
        run: npm audit --audit-level=moderate

      - name: Run security audit (frontend)
        working-directory: frontend
        run: npm audit --audit-level=moderate

      - name: Run ESLint (frontend)
        working-directory: frontend
        run: npm run lint

      - name: Check TypeScript compilation (backend)
        working-directory: backend
        run: npx tsc --noEmit

      - name: Check TypeScript compilation (frontend)
        working-directory: frontend
        run: npx tsc --noEmit

  # Build and deployment readiness
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install and build backend
        working-directory: backend
        run: |
          npm ci
          npm run build

      - name: Install and build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Test Docker builds
        run: |
          docker build -t subway-lettuce-backend ./backend
          docker build -t subway-lettuce-frontend ./frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/dist/
          retention-days: 7

  # Test coverage reporting
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()

    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v3

      - name: Generate combined coverage report
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | [![Backend Coverage](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.ref_name }}/graph/badge.svg?flag=backend)](https://codecov.io/gh/${{ github.repository }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | [![Frontend Coverage](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.ref_name }}/graph/badge.svg?flag=frontend)](https://codecov.io/gh/${{ github.repository }}) |" >> $GITHUB_STEP_SUMMARY

  # Notification on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-checks, build-check]
    if: failure() && github.event_name == 'push'

    steps:
      - name: Notify team of test failures
        run: |
          echo "❌ Test suite failed for commit ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Author: ${{ github.actor }}"
          echo "Check the Actions tab for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"