name: Build and Push to GHCR

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-all-in-one:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-aio
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create All-in-One Dockerfile
        run: |
          cat > Dockerfile.aio << 'EOF'
          # Multi-stage build for All-in-One container
          FROM node:18-alpine AS backend-builder
          WORKDIR /app/backend
          COPY backend/package*.json ./
          RUN npm ci --only=production
          COPY backend/ ./
          RUN npm run build

          FROM node:18-alpine AS frontend-builder
          WORKDIR /app/frontend
          COPY frontend/package*.json ./
          RUN npm ci
          COPY frontend/ ./
          RUN npm run build

          # Final stage with all services
          FROM postgis/postgis:15-3.3-alpine AS final

          # Install Node.js, Redis, and Nginx
          RUN apk add --no-cache nodejs npm redis nginx supervisor curl wget

          # Create application directories
          RUN mkdir -p /app/{backend,frontend,logs} /var/log/supervisor

          # Copy backend
          COPY --from=backend-builder /app/backend/dist /app/backend/
          COPY --from=backend-builder /app/backend/node_modules /app/backend/node_modules
          COPY --from=backend-builder /app/backend/package.json /app/backend/

          # Copy frontend
          COPY --from=frontend-builder /app/frontend/dist /app/frontend/

          # Copy nginx configuration
          COPY nginx/nginx.conf /etc/nginx/nginx.conf

          # Create supervisor configuration
          RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'SUPERVISOR_EOF'
          [supervisord]
          nodaemon=true
          user=root
          logfile=/var/log/supervisor/supervisord.log
          pidfile=/var/run/supervisord.pid

          [program:postgresql]
          command=/usr/local/bin/docker-entrypoint.sh postgres
          autostart=true
          autorestart=true
          stderr_logfile=/var/log/supervisor/postgresql.err.log
          stdout_logfile=/var/log/supervisor/postgresql.out.log

          [program:redis]
          command=redis-server --appendonly yes --requirepass %(ENV_REDIS_PASSWORD)s
          autostart=true
          autorestart=true
          stderr_logfile=/var/log/supervisor/redis.err.log
          stdout_logfile=/var/log/supervisor/redis.out.log

          [program:backend]
          command=node /app/backend/server.js
          directory=/app/backend
          autostart=true
          autorestart=true
          environment=NODE_ENV=production,DATABASE_URL="%(ENV_DATABASE_URL)s",REDIS_URL="%(ENV_REDIS_URL)s"
          stderr_logfile=/var/log/supervisor/backend.err.log
          stdout_logfile=/var/log/supervisor/backend.out.log

          [program:nginx]
          command=nginx -g "daemon off;"
          autostart=true
          autorestart=true
          stderr_logfile=/var/log/supervisor/nginx.err.log
          stdout_logfile=/var/log/supervisor/nginx.out.log
          SUPERVISOR_EOF

          # Create startup script
          RUN cat > /app/start.sh << 'START_EOF'
          #!/bin/sh
          set -e

          # Set default environment variables
          export POSTGRES_DB=${POSTGRES_DB:-subway_lettuce_tracker}
          export POSTGRES_USER=${POSTGRES_USER:-postgres}
          export POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
          export REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
          export DATABASE_URL=${DATABASE_URL:-postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}}
          export REDIS_URL=${REDIS_URL:-redis://:${REDIS_PASSWORD}@localhost:6379}

          # Initialize PostgreSQL if needed
          if [ ! -d "/var/lib/postgresql/data/base" ]; then
              echo "Initializing PostgreSQL..."
              su-exec postgres initdb -D /var/lib/postgresql/data
              su-exec postgres pg_ctl -D /var/lib/postgresql/data start
              sleep 5
              su-exec postgres createdb $POSTGRES_DB
              su-exec postgres pg_ctl -D /var/lib/postgresql/data stop
          fi

          # Start all services with supervisor
          exec supervisord -c /etc/supervisor/conf.d/supervisord.conf
          START_EOF

          RUN chmod +x /app/start.sh

          # Expose ports
          EXPOSE 8080 5000 5432 6379

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:8080/ || exit 1

          # Set working directory
          WORKDIR /app

          # Start the application
          CMD ["/app/start.sh"]
          EOF

      - name: Build and push All-in-One Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.aio
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  update-unraid-templates:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-all-in-one]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Unraid templates with new image tags
        run: |
          # Get the repository name in lowercase
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          # Update all-in-one template
          sed -i "s|<Repository>.*</Repository>|<Repository>ghcr.io/${REPO_LOWER}-aio:latest</Repository>|g" unraid-templates/subway-lettuce-tracker-all-in-one.xml
          
          # Update stack template
          sed -i "s|<Repository>.*</Repository>|<Repository>ghcr.io/${REPO_LOWER}-frontend:latest</Repository>|g" unraid-templates/subway-lettuce-tracker-stack.xml
          
          # Update template URLs to point to the actual repository
          sed -i "s|https://raw.githubusercontent.com/your-username/subway-lettuce-tracker|https://raw.githubusercontent.com/${{ github.repository }}|g" unraid-templates/*.xml
          
          # Update support and project URLs
          sed -i "s|https://github.com/your-username/subway-lettuce-tracker|https://github.com/${{ github.repository }}|g" unraid-templates/*.xml

      - name: Commit updated templates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add unraid-templates/*.xml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Unraid templates with latest image tags [skip ci]"
            git push
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-all-in-one]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Docker Images
            
            ### Individual Components
            - Backend: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend:${{ github.ref_name }}`
            - Frontend: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend:${{ github.ref_name }}`
            
            ### All-in-One
            - Complete Stack: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-aio:${{ github.ref_name }}`
            
            ### Unraid Templates
            - [All-in-One Template](https://raw.githubusercontent.com/${{ github.repository }}/main/unraid-templates/subway-lettuce-tracker-all-in-one.xml)
            - [Individual Components](https://github.com/${{ github.repository }}/tree/main/unraid-templates)
            
            ## Installation
            
            ### Docker Compose
            ```bash
            docker-compose up -d
            ```
            
            ### Docker Run (All-in-One)
            ```bash
            docker run -d \
              --name subway-lettuce-tracker \
              -p 8080:8080 \
              -e VITE_GOOGLE_MAPS_API_KEY=your_api_key_here \
              -e POSTGRES_PASSWORD=secure_password \
              -e REDIS_PASSWORD=secure_password \
              -v /path/to/data:/app/data \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-aio:${{ github.ref_name }}
            ```
            
            ### Unraid
            1. Add the template URL to your Unraid Docker templates
            2. Search for "Subway Lettuce Tracker" in Community Applications
            3. Configure the required environment variables
            
            ## What's Changed
            - See commit history for detailed changes
          draft: false
          prerelease: false